[33mcommit 02a7e99916dc1985e6847a179d2410b738cf8256[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m
Author: i-Veni-Vidi-Vici <biuld1234@gmail.com>
Date:   Sat Mar 29 15:13:15 2025 +0900

    feat(33): create Practice3

[1mdiff --git a/leetcode/src/main/java/dynamicprogramming/_343/Practice2.java b/leetcode/src/main/java/dynamicprogramming/_343/Practice2.java[m
[1mindex d3c8d82..06903b2 100644[m
[1m--- a/leetcode/src/main/java/dynamicprogramming/_343/Practice2.java[m
[1m+++ b/leetcode/src/main/java/dynamicprogramming/_343/Practice2.java[m
[36m@@ -1,2 +1,24 @@[m
[31m-package dynamicprogramming._343;public class Practice2 {[m
[32m+[m[32mpackage dynamicprogramming._343;[m
[32m+[m
[32m+[m[32mpublic class Practice2 {[m
[32m+[m[32m    public int integerBreak(int n) {[m
[32m+[m[32m        if (n == 2) return 1;[m
[32m+[m[32m        if (n == 3) return 2;[m
[32m+[m
[32m+[m[32m        int[] dp = new int[n + 1];[m
[32m+[m[32m        dp[1] = 1;[m
[32m+[m[32m        dp[2] = 2;[m
[32m+[m[32m        dp[3] = 3;[m
[32m+[m
[32m+[m[32m        for (int i = 4; i <= n; i++) {[m
[32m+[m[32m            dp[i] = i;[m
[32m+[m[32m            for (int j = 2; j <= i/2; j++) {[m
[32m+[m[32m                int mul = dp[j] * dp[i-j];[m
[32m+[m[32m                dp[i] = Math.max(dp[i], mul);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return dp[n];[m
[32m+[m[32m    }[m
[32m+[m[32m    // 1ms[m
 }[m
[1mdiff --git a/leetcode/src/main/java/linear/array/_33/Practice3.java b/leetcode/src/main/java/linear/array/_33/Practice3.java[m
[1mnew file mode 100644[m
[1mindex 0000000..85bad1a[m
[1m--- /dev/null[m
[1m+++ b/leetcode/src/main/java/linear/array/_33/Practice3.java[m
[36m@@ -0,0 +1,35 @@[m
[32m+[m[32mpackage linear.array._33;[m
[32m+[m
[32m+[m[32mpublic class Practice3 {[m
[32m+[m[32m    public int search(int[] nums, int target) {[m
[32m+[m[32m        if (nums == null || nums.length == 0) return -1;[m
[32m+[m
[32m+[m[32m        int left = 0;[m
[32m+[m[32m        int right = nums.length - 1;[m
[32m+[m
[32m+[m[32m        while (left <= right) {[m
[32m+[m[32m            int mid = left + (right - left) / 2;[m
[32m+[m[32m            if (nums[mid] == target) {[m
[32m+[m[32m                return mid;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            if (nums[left] <= nums[mid]) {[m
[32m+[m[32m                if (nums[left] <= target && target < nums[mid]) {[m
[32m+[m[32m                    right = mid - 1;[m
[32m+[m[32m                } else {[m
[32m+[m[32m                    left = mid + 1;[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m            else {[m
[32m+[m[32m                if (nums[mid] < target && target <= nums[right]) {[m
[32m+[m[32m                    left = mid + 1;[m
[32m+[m[32m                } else {[m
[32m+[m[32m                    right = mid - 1;[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return -1;[m
[32m+[m[32m    }[m
[32m+[m[32m    // 0ms[m
[32m+[m[32m}[m
